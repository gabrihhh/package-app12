import { AfterViewInit, EventEmitter, OnChanges, OnInit } from '@angular/core';
import { MatMenuTrigger } from '@angular/material/menu';
import * as i0 from "@angular/core";
export declare class NgxTimepicker12Component implements OnInit, AfterViewInit, OnChanges {
    menuTrigger: MatMenuTrigger;
    width: number;
    height: number;
    font: number;
    max: string;
    min: string;
    response: number | null;
    responseString: string | null;
    needSeconds: boolean;
    type: 'milisecond' | 'second' | 'minute' | 'hour' | 'time';
    cor: string;
    disabled: boolean;
    responseChange: EventEmitter<any>;
    responseStringChange: EventEmitter<any>;
    widthCss: string;
    heightCss: string;
    fontCss: string;
    hour: number;
    minute: number;
    second: number;
    selected: 'hour' | 'minute' | 'second' | null;
    maxHour: number;
    maxMinute: number;
    maxSecond: number;
    minHour: number;
    minMinute: number;
    minSecond: number;
    disableClock: boolean;
    hourClock: string | null;
    minuteClock: string | null;
    secondClock: string | null;
    maxHourLength: number;
    private newInput;
    private hourString;
    constructor();
    ngOnInit(): void;
    ngOnChanges(changes: any): void;
    init(responseString: String): void;
    ngAfterViewInit(): void;
    lostFocus(): void;
    focus($event: any): void;
    apagar(local: 'hour' | 'minute' | 'second' | null): void;
    digitar(num: number, local: 'hour' | 'minute' | 'second' | null): void;
    updateValue(): void;
    maxClock(): void;
    nowClock(): void;
    fecharMenu(trigger: MatMenuTrigger): void;
    preencherDivs(): void;
    destroyDivs(id: string): void;
    confirmClock(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<NgxTimepicker12Component, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<NgxTimepicker12Component, "ngx-timepicker", never, { "width": "width"; "height": "height"; "font": "font"; "max": "max"; "min": "min"; "response": "response"; "responseString": "responseString"; "needSeconds": "needSeconds"; "type": "type"; "cor": "cor"; "disabled": "disabled"; }, { "responseChange": "responseChange"; "responseStringChange": "responseStringChange"; }, never, never>;
}
